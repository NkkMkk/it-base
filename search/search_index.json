{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IT Base","text":"<p>Welcome to your personal knowledge base. Use this site to collect notes about programming and much more.</p> <ul> <li>Quick search with the magnifier in the top bar</li> <li>Dark, distraction-free reading</li> <li>Copy code buttons on code blocks</li> </ul> <p>Get started by exploring the sections in the left navigation.</p>"},{"location":"programming/","title":"Programming Overview","text":"<p>This section collects core programming concepts, language notes, and reusable snippets.</p>"},{"location":"programming/javascript/","title":"JavaScript","text":"<p>Notes and snippets for JavaScript.</p> <pre><code>// Example: optional chaining\nconst city = user?.address?.city ?? \"Unknown\";\n</code></pre>"},{"location":"programming/python/","title":"Python","text":"<p>Tips, patterns, and snippets for Python.</p> <pre><code># Example: f-string formatting\nname = \"World\"\nprint(f\"Hello, {name}!\")\n</code></pre>"},{"location":"programming/python/#lorem-asdasdasdasd","title":"lorem asdasdasdasd","text":"<p>asd asd a sd asd as d asd as da sd asd a sd asd as da sd asd a</p> <p>sdad</p> <p>asd</p> <p>asd</p> <p>asd</p> <p>asd</p> <p>ads</p> <p>asd</p> <p>a</p> <p>asd</p> <p>ads</p>"},{"location":"programming/python/#asdasddddd","title":"asdasddddd","text":"<p>asd</p> <p>asd</p> <p>asd</p> <p>asd</p> <p>asd</p> <p>ads</p> <p>ads</p> <p>asd</p>"},{"location":"programming/python/#asd","title":"asd","text":""},{"location":"programming/python/#grgtrg-5","title":"grgtrg 5","text":""},{"location":"programming/python/#sdssss","title":"sdssss","text":""},{"location":"programming/snippets/","title":"Tips &amp; Snippets","text":"<p>Short, copyable snippets for daily work.</p> Bash <pre><code># Find large files\nfind . -type f -size +50M -print0 | xargs -0 ls -lh\n</code></pre> Git <pre><code># Amend last commit message\ngit commit --amend -m \"Better message\"\n</code></pre>"},{"location":"sql/","title":"Introduction to SQL","text":"<p>SQL (Structured Query Language) is the standard language for working with relational databases. It lets you define, query, and manipulate structured data stored in tables.</p> <p>What you'll learn</p> <ul> <li>The difference between databases, DBMS, and RDBMS</li> <li>How relational data is organized (tables, rows, columns)</li> <li>Common data types and a tiny example schema with sample queries</li> </ul>"},{"location":"sql/#databases","title":"Databases","text":"<p>Data is a collection of individual pieces of information: text, numbers, dates, images, etc. A database is an organized place to store that data so you can search, update, and manage it efficiently.</p> <p>Think of a library: it stores many books (records). Each book has attributes (title, author, ISBN) just like a record has columns in a table.</p> <p>Databases are used everywhere: product catalogs, orders, user profiles, analytics, and more. Important business data (prices, stock levels, customer details) should live in the database, not scattered through application code.</p>"},{"location":"sql/#dbms-database-management-system","title":"DBMS (Database Management System)","text":"<p>A DBMS is the software that manages databases. It provides tools to create schemas, enforce validation rules, run queries, and control access.</p> <p>Key responsibilities:</p> <ul> <li>Data definition and storage</li> <li>Query processing and optimization</li> <li>Transaction management and concurrency control</li> <li>Backup, recovery, and security</li> </ul>"},{"location":"sql/#rdbms-relational-dbms","title":"RDBMS (Relational DBMS)","text":"<p>An RDBMS is a DBMS built around the relational model: data is stored in tables with rows and columns. Relationships between tables are expressed via keys, making it easy to join related data in queries.</p> <p>Popular relational systems:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>Oracle Database</li> <li>H2 Database (lightweight, often used for testing)</li> </ul> <p>Although other database models exist (document, key-value, graph), this lesson focuses on relational databases and SQL.</p>"},{"location":"sql/#how-relational-data-is-organized","title":"How relational data is organized","text":"<p>Tables are collections of rows (records). Each table defines columns with names and data types (for example: first_name TEXT, age INTEGER). A table can contain millions of rows; the schema defines what each row must look like.</p> <p>Common concepts:</p> <ul> <li>Primary key: a column (or set) that uniquely identifies a row</li> <li>Foreign key: a column that references a primary key in another table, expressing a relationship -- Indexes: structures that speed up lookups on specific columns (PostgreSQL indexes)</li> </ul>"},{"location":"sql/#common-data-types-overview","title":"Common data types (overview)","text":"<ul> <li><code>INTEGER</code> / <code>BIGINT</code> \u2014 whole numbers</li> <li><code>DECIMAL</code> / <code>NUMERIC</code> \u2014 fixed-precision numbers (money)</li> <li><code>FLOAT</code> / <code>DOUBLE</code> \u2014 floating-point numbers</li> <li><code>TEXT</code> / <code>VARCHAR</code> \u2014 variable-length strings</li> <li><code>BOOLEAN</code> \u2014 true/false</li> <li><code>DATE</code> / <code>TIMESTAMP</code> \u2014 dates and times</li> <li><code>BYTEA</code> / <code>BLOB</code> \u2014 binary data (files, images)</li> </ul>"},{"location":"sql/#example-simple-library-schema","title":"Example: Simple library schema","text":"<p>This tiny schema shows three related tables: authors, books, and loans. It's intentionally small to illustrate relationships.</p> <pre><code>CREATE TABLE authors (\n    id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL;\n);\n</code></pre> Column Type Constraints Description id SERIAL PRIMARY KEY Author identifier name TEXT NOT NULL Author full name <pre><code>CREATE TABLE books (\n    id SERIAL PRIMARY KEY,\n    title TEXT NOT NULL,\n    author_id INTEGER REFERENCES authors(id),\n    published_year INTEGER,\n    isbn VARCHAR(20);\n);\n</code></pre> Column Type Constraints Description id SERIAL PRIMARY KEY Book identifier title TEXT NOT NULL Book title author_id INTEGER REFERENCES authors(id) Foreign key to authors published_year INTEGER Year of publication isbn VARCHAR(20) ISBN code <pre><code>CREATE TABLE loans (\n    id SERIAL PRIMARY KEY,\n    book_id INTEGER REFERENCES books(id),\n    borrower_name TEXT NOT NULL,\n    loaned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    returned_at TIMESTAMP;\n);\n</code></pre> Column Type Constraints Description id SERIAL PRIMARY KEY Loan identifier book_id INTEGER REFERENCES books(id) Foreign key to books borrower_name TEXT NOT NULL Name of borrower loaned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP When the book was loaned returned_at TIMESTAMP When the book was returned (nullable)"},{"location":"sql/#sample-queries","title":"Sample queries","text":"<ul> <li> <p>Find all books by a given author: <pre><code>SELECT b.title\nFROM books b\nJOIN authors a ON b.author_id = a.id\nWHERE a.name = 'Agatha Christie';\n</code></pre></p> </li> <li> <p>List all books with their authors: <pre><code>SELECT b.title, a.name\nFROM books b;\n</code></pre></p> </li> <li> <p>List all currently loaned out books: <pre><code>SELECT b.title, a.name\nFROM books b;\n</code></pre></p> </li> </ul>"}]}