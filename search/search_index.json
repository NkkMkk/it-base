{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IT Base","text":"<p>Welcome to your personal knowledge base. Use this site to collect notes about programming and much more.</p> <ul> <li>Quick search with the magnifier in the top bar</li> <li>Dark, distraction-free reading</li> <li>Copy code buttons on code blocks</li> </ul> <p>Get started by exploring the sections in the left navigation.</p>"},{"location":"programming/","title":"Programming Overview","text":"<p>This section collects core programming concepts, language notes, and reusable snippets.</p>"},{"location":"programming/javascript/","title":"JavaScript","text":"<p>Notes and snippets for JavaScript.</p> <pre><code>// Example: optional chaining\nconst city = user?.address?.city ?? \"Unknown\";\n</code></pre>"},{"location":"programming/python/","title":"Python","text":"<p>Tips, patterns, and snippets for Python.</p> <pre><code># Example: f-string formatting\nname = \"World\"\nprint(f\"Hello, {name}!\")\n</code></pre>"},{"location":"programming/python/#lorem-asdasdasdasd","title":"lorem asdasdasdasd","text":"<p>asd asd a sd asd as d asd as da sd asd a sd asd as da sd asd a</p> <p>sdad</p> <p>asd</p> <p>asd</p> <p>asd</p> <p>asd</p> <p>ads</p> <p>asd</p> <p>a</p> <p>asd</p> <p>ads</p>"},{"location":"programming/python/#asdasddddd","title":"asdasddddd","text":"<p>asd</p> <p>asd</p> <p>asd</p> <p>asd</p> <p>asd</p> <p>ads</p> <p>ads</p> <p>asd</p>"},{"location":"programming/python/#asd","title":"asd","text":""},{"location":"programming/python/#grgtrg-5","title":"grgtrg 5","text":""},{"location":"programming/python/#sdssss","title":"sdssss","text":""},{"location":"programming/snippets/","title":"Tips &amp; Snippets","text":"<p>Short, copyable snippets for daily work.</p> Bash <pre><code># Find large files\nfind . -type f -size +50M -print0 | xargs -0 ls -lh\n</code></pre> Git <pre><code># Amend last commit message\ngit commit --amend -m \"Better message\"\n</code></pre>"},{"location":"sql/","title":"Introduction to SQL","text":"<p>Structured Query Language (SQL) lets you query and manipulate structured data stored in tables. Many Database Management Systems (DBMS) implement SQL or a close dialect of it.</p> <p>SQL is commonly pronounced by letters (\"S\u2011Q\u2011L\"), though you'll sometimes hear \"sequel\".</p> <p>What you'll learn:</p> <ul> <li>The difference between databases, DBMS, and RDBMS</li> <li>How relational data is organized (tables, rows, columns)</li> <li>Common data types and a tiny example schema with sample queries</li> </ul>"},{"location":"sql/#databases","title":"Databases","text":"<p>Data is a collection of individual pieces of information: text, numbers, dates, images, etc. A database is an organized place to store that data so you can search, update, and manage it efficiently.</p> <p>Think of a library: it stores many books (records). Each book has attributes (title, author, ISBN) just like a record has columns in a table.</p> <p>Databases are used everywhere: product catalogs, orders, user profiles, analytics, and more. Important business data (prices, stock levels, customer details) should live in the database, not scattered through application code.</p>"},{"location":"sql/#dbms-database-management-system","title":"DBMS (Database Management System)","text":"<p>A DBMS is the software that manages databases. It provides tools to create schemas, enforce validation rules, run queries, and control access.</p> <p>Key responsibilities:</p> <ul> <li>Data definition and storage</li> <li>Query processing and optimization</li> <li>Transaction management and concurrency control</li> <li>Backup, recovery, and security</li> </ul>"},{"location":"sql/#rdbms-relational-dbms","title":"RDBMS (Relational DBMS)","text":"<p>An RDBMS is a DBMS built around the relational model: data is stored in tables with rows and columns. Relationships between tables are expressed via keys, making it easy to join related data in queries.</p> <p>Popular relational systems:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>Oracle Database</li> <li>H2 Database (lightweight, often used for testing)</li> </ul> <p>Although other database models exist (document, key-value, graph), this lesson focuses on relational databases and SQL.</p>"},{"location":"sql/#how-relational-data-is-organized","title":"How relational data is organized","text":"<p>Tables are collections of rows (records). Each table defines columns with names and data types (for example: first_name TEXT, age INTEGER). A table can contain millions of rows; the schema defines what each row must look like.</p> <p>Common concepts:</p> <ul> <li>Primary key: a column (or set) that uniquely identifies a row</li> <li>Foreign key: a column that references a primary key in another table, expressing a relationship -- Indexes: structures that speed up lookups on specific columns (PostgreSQL indexes)</li> </ul>"},{"location":"sql/#common-data-types-overview","title":"Common data types (overview)","text":"<ul> <li><code>INTEGER</code> / <code>BIGINT</code> \u2014 whole numbers</li> <li><code>DECIMAL</code> / <code>NUMERIC</code> \u2014 fixed-precision numbers (money)</li> <li><code>FLOAT</code> / <code>DOUBLE</code> \u2014 floating-point numbers</li> <li><code>TEXT</code> / <code>VARCHAR</code> \u2014 variable-length strings</li> <li><code>BOOLEAN</code> \u2014 true/false</li> <li><code>DATE</code> / <code>TIMESTAMP</code> \u2014 dates and times</li> <li><code>BYTEA</code> / <code>BLOB</code> \u2014 binary data (files, images)</li> </ul>"},{"location":"sql/#example-simple-library-schema","title":"Example: Simple library schema","text":"<p>This tiny schema shows three related tables: authors, books, and loans. It's intentionally small to illustrate relationships.</p> <pre><code>CREATE TABLE authors (\n    id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL\n);\n</code></pre> Column Type Constraints Description id SERIAL PRIMARY KEY Author identifier name TEXT NOT NULL Author full name <pre><code>CREATE TABLE books (\n    id SERIAL PRIMARY KEY,\n    title TEXT NOT NULL,\n    author_id INTEGER REFERENCES authors(id),\n    published_year INTEGER,\n    isbn VARCHAR(20);\n);\n</code></pre> Column Type Constraints Description id SERIAL PRIMARY KEY Book identifier title TEXT NOT NULL Book title author_id INTEGER REFERENCES authors(id) Foreign key to authors published_year INTEGER Year of publication isbn VARCHAR(20) ISBN code <pre><code>CREATE TABLE loans (\n    id SERIAL PRIMARY KEY,\n    book_id INTEGER REFERENCES books(id),\n    borrower_name TEXT NOT NULL,\n    loaned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    returned_at TIMESTAMP;\n);\n</code></pre> Column Type Constraints Description id SERIAL PRIMARY KEY Loan identifier book_id INTEGER REFERENCES books(id) Foreign key to books borrower_name TEXT NOT NULL Name of borrower loaned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP When the book was loaned returned_at TIMESTAMP When the book was returned (nullable)"},{"location":"sql/#sample-queries","title":"Sample queries","text":"<ul> <li>Find all books by a given author:</li> </ul> <pre><code>SELECT b.title\nFROM books b\nJOIN authors a ON b.author_id = a.id\nWHERE a.name = 'Agatha Christie';\n</code></pre> <ul> <li>List all books with their authors:</li> </ul> <pre><code>SELECT b.title, a.name\nFROM books b;\n</code></pre> <ul> <li>List all currently loaned out books:</li> </ul> <pre><code>SELECT b.title, a.name\nFROM books b;\n</code></pre>"},{"location":"sql/select-clause/","title":"SELECT clause","text":"<p>Structured Query Language (SQL) is the standard language for working with relational databases.</p> <p>What you'll learn:</p> <ul> <li>The purpose of <code>SELECT</code> and how to choose columns</li> <li>How to select all columns with <code>*</code></li> <li>How to write single-line and multi-line comments in SQL</li> <li>A few quick examples you can try</li> </ul>"},{"location":"sql/select-clause/#crud","title":"CRUD","text":"<p>Working with databases typically involves four operations: Create, Read, Update, Delete (CRUD). This lesson focuses on Read \u2014 retrieving data with <code>SELECT</code>.</p> <p><code>SELECT</code> returns a result set (a table of rows) based on the columns and table you specify.</p>"},{"location":"sql/select-clause/#select-statement-syntax","title":"SELECT statement syntax","text":"<p>The basic form is:</p> <pre><code>SELECT column_1, column_2, ...\nFROM table_name;\n</code></pre> <ul> <li><code>column_1, column_2, ...</code> \u2014 the columns to return</li> <li><code>table_name</code> \u2014 the table to read from</li> </ul> <p>To return every column from the table use <code>*</code>:</p> <pre><code>SELECT *\nFROM table_name;\n</code></pre>"},{"location":"sql/select-clause/#comments","title":"Comments","text":"<p>Comments explain SQL statements or temporarily disable them. Two common styles are supported (see the comments section of the SQL lexical rules):</p> <ul> <li>Single-line comments start with <code>--</code> and run to the end of the line:</li> </ul> <pre><code>-- SELECT * FROM actor;\nSELECT * FROM movie;\n</code></pre> <ul> <li>Multi-line comments are enclosed between <code>/*</code> and <code>*/</code>:</li> </ul> <pre><code>/* SELECT name FROM actor;\nSELECT title FROM book; */\nSELECT title FROM movie;\n</code></pre>"},{"location":"sql/select-clause/#quick-examples","title":"Quick examples","text":"<ul> <li>Select specific columns:</li> </ul> <pre><code>SELECT id, title, published_year\nFROM books;\n</code></pre> <ul> <li>Select all columns:</li> </ul> <pre><code>SELECT *\nFROM authors;\n</code></pre> <ul> <li>Use a comment to temporarily disable a query while testing:</li> </ul> <pre><code>-- SELECT * FROM loans;\nSELECT id, borrower_name\nFROM loans\nWHERE returned_at IS NULL;\n</code></pre>"},{"location":"sql/where-clause/","title":"WHERE clause","text":"<p>Now talking about the <code>WHERE</code> clause. You'll see how to use <code>WHERE</code> with comparison operators and logical operators, plus a short note on coding style.</p>"},{"location":"sql/where-clause/#purpose-of-where","title":"Purpose of <code>WHERE</code>","text":"<p><code>WHERE</code> filters rows from the table. It evaluates a condition for each row and includes the row in the result set only if the condition is true.</p> <p>Basic syntax (see <code>WHERE</code> reference: PostgreSQL \u2014 WHERE):</p> <pre><code>SELECT column_1, column_2, ...\nFROM table_name\nWHERE some_condition;\n</code></pre> <p><code>some_condition</code> is an expression rows must satisfy to be returned.</p>"},{"location":"sql/where-clause/#comparison-operators","title":"Comparison operators","text":"<p>Common operators you can use inside <code>WHERE</code> (see also: Comparison Functions and Operators):</p> <ul> <li><code>=</code>  \u2014 equal</li> <li><code>!=</code> \u2014 not equal</li> <li><code>&gt;</code>  \u2014 greater than</li> <li><code>&lt;</code>  \u2014 less than</li> <li><code>&gt;=</code> \u2014 greater than or equal</li> <li><code>&lt;=</code> \u2014 less than or equal</li> </ul>"},{"location":"sql/where-clause/#example-filter-users-by-age","title":"Example \u2014 filter users by age","text":"first_name age Alice 18 Bob 25 John 23 <p>Select rows where age &gt; 20</p> <pre><code>SELECT *\nFROM users\nWHERE age &gt; 20;\n</code></pre> <p>Result</p> <pre><code>first_name  age\nBob         25\nJohn        23\n</code></pre>"},{"location":"sql/where-clause/#date-example-note-single-quotes-around-the-date-literal","title":"Date example (note single quotes around the date literal)","text":"first_name birth_date Alice 1997-05-21 Bob 2001-02-16 John 1992-11-03 <p>Select rows where birth_date &lt; '2000-01-01'</p> <pre><code>SELECT *\nFROM users\nWHERE birth_date &lt; '2000-01-01';\n</code></pre> <p>Result</p> first_name birth_date Alice 1997-05-21 John 1992-11-03"},{"location":"sql/where-clause/#logical-operators-and-or-not","title":"Logical operators: AND, OR, NOT","text":"<p>Logical operators let you combine simple conditions into richer predicates. SQL uses three primary logical operators: NOT, AND, and OR. Remember SQL implements three-valued logic (TRUE, FALSE, UNKNOWN) when NULLs are involved. See: Conditional Expressions and Boolean Functions.</p>"},{"location":"sql/where-clause/#combine-conditions-using-and-or-and-not","title":"Combine conditions using <code>AND</code>, <code>OR</code>, and <code>NOT</code>","text":""},{"location":"sql/where-clause/#and-all-conditions-must-be-true","title":"AND \u2014 all conditions must be true","text":"<p>the condition_1 AND condition_2 must both be true for the row to be included.</p> <pre><code>SELECT *\nFROM table_name\nWHERE condition_1 AND condition_2;\n</code></pre> first_name age city Alice 18 Vilnius Bob 25 Vilnius John 23 Kaunas <p>Example \u2014 select 18-year-olds in Vilnius:</p> <pre><code>SELECT *\nFROM users\nWHERE city = 'Vilnius' AND age = 18;\n</code></pre> <p>Result</p> first_name age city Alice 18 Vilnius"},{"location":"sql/where-clause/#or-at-least-one-condition-must-be-true","title":"OR \u2014 at least one condition must be true","text":"<p>the condition_1 OR condition_2 must be true for the row to be included.</p> <pre><code>SELECT *\nFROM table_name\nWHERE condition_1 OR condition_2;\n</code></pre> <p>Example \u2014 select ages 18 or 23</p> <pre><code>SELECT *\nFROM users\nWHERE age = 18 OR age = 23;\n</code></pre> <p>Result</p> first_name age city Alice 18 Vilnius John 23 Kaunas"},{"location":"sql/where-clause/#not-negate-a-condition","title":"NOT \u2014 negate a condition","text":"<p>the NOT condition negates the truth value of the condition.</p> <pre><code>SELECT *\nFROM table_name\nWHERE NOT condition;\n</code></pre> <p>Example \u2014 rows where city is not <code>'Vilnius'</code></p> <pre><code>SELECT *\nFROM users\nWHERE NOT city = 'Vilnius';\n</code></pre> <p>Equivalent using <code>!=</code></p> <pre><code>SELECT *\nFROM users\nWHERE city != 'Vilnius';\n</code></pre>"},{"location":"sql/where-clause/#between-like-and-in-for-ranges","title":"<code>BETWEEN</code>, <code>LIKE</code>, and <code>IN</code> for ranges","text":"<p>You can also use <code>BETWEEN</code>, <code>LIKE</code>, and <code>IN</code> for ranges, pattern matching and set membership \u2014 see the docs: Comparison / Pattern Matching and Pattern Matching.</p>"},{"location":"sql/where-clause/#between-inclusive-range","title":"<code>BETWEEN</code> (inclusive range)","text":"<p>BETWEEN returns values within the given range, inclusive of the endpoints.</p> <pre><code>SELECT *\nFROM table_name\nWHERE column_name BETWEEN value1 AND value2;\n</code></pre> <p>Example \u2014 filter users by age</p> id first_name age 1 Anna 19 2 Maria 24 3 Tom 30 <pre><code>SELECT id, first_name, age\nFROM users\nWHERE age BETWEEN 20 AND 30;\n</code></pre> <p>Result</p> id first_name age 2 Maria 24 3 Tom 30"},{"location":"sql/where-clause/#like-pattern-matching","title":"LIKE (pattern matching)","text":"<p>Use % for any-length wildcard and _ for a single character.</p> <p>Example query to find usernames starting with \"ju\"</p> id username 1 lisa01 2 ben_s 3 julia <pre><code>SELECT id, username\nFROM accounts\nWHERE username LIKE 'ju%';\n</code></pre> <p>Result</p> id username 3 julia <p>Example query to find usernames with 'b' as the first letter and 'n' as the third letter</p> <pre><code>SELECT id, username\nFROM accounts\nWHERE username LIKE 'b_n%';\n</code></pre> <p>Matches \"ben_s\" (underscore matches one character). Case sensitivity depends on the database collation.</p>"},{"location":"sql/where-clause/#in-set-membership","title":"IN (set membership)","text":"<p>IN is shorthand for multiple OR comparisons.</p> <p>Example query to find countries 'France' or 'Spain'</p> id country 1 France 2 Italy 3 Germany 4 Spain <pre><code>SELECT id, country\nFROM locations\nWHERE country IN ('France', 'Spain');\n</code></pre> <p>Result</p> id country 1 France 4 Spain <p>Note: IN ignores NULL values unless you explicitly include NULL (e.g., WHERE country IN ('France', NULL)).</p>"},{"location":"sql/where-clause/#coding-style","title":"Coding style","text":"<p>SQL is case-insensitive for keywords, but using uppercase for SQL keywords improves readability. Also prefer logical line breaks for each part of the statement.</p> <p>Good</p> <pre><code>SELECT first_name, age, city\nFROM users\nWHERE age &gt;= 20 AND city = 'Vilnius';\n</code></pre> <p>Bad (hard to read)</p> <pre><code>SeLeCT first_name, age, city From users where age &gt;= 20 AND city = 'Vilnius';\n</code></pre> <p>Note: SQL identifiers (table and column names) are generally case-insensitive, but textual data stored in the database may be case-sensitive depending on collation/settings \u2014 for example, <code>Jan</code> and <code>JAN</code> can be treated as different values (see PostgreSQL \u2014 Identifiers and Key Words).</p>"}]}